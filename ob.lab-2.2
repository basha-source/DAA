import heapq
import sys

def dijkstra(n, edges, source, target):
    # Create an adjacency list from the edge list
    graph = {i: [] for i in range(n)}
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))  # Assuming the graph is undirected; remove this line if directed
    
    # Initialize distances and priority queue
    dist = [sys.maxsize] * n
    dist[source] = 0
    pq = [(0, source)]  # (distance, vertex)
    
    while pq:
        current_dist, u = heapq.heappop(pq)
        
        # If we reached the target vertex, return the distance
        if u == target:
            return current_dist
        
        # If the distance is already larger than the known shortest distance, skip processing
        if current_dist > dist[u]:
            continue
        
        # Process each neighbor of u
        for v, weight in graph[u]:
            distance = current_dist + weight
            
            # If a shorter path to v is found
            if distance < dist[v]:
                dist[v] = distance
                heapq.heappush(pq, (distance, v))
    
    return dist[target]

# Test case 1
n = 6
edges = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14),
    (1, 2, 10), (1, 3, 15),
    (2, 3, 11), (2, 5, 2),
    (3, 4, 6), (4, 5, 9)
]
source = 0
target = 4
print(dijkstra(n, edges, source, target))  # Expected Output: 20

# Test case 2
n = 5
edges = [
    (0, 1, 10), (0, 4, 3),
    (1, 2, 2), (1, 4, 4),
    (2, 3, 9), (3, 2, 7),
    (4, 1, 1), (4, 2, 8), (4, 3, 2)
]
source = 0
target = 3
print(dijkstra(n, edges, source, target))  # Expected Output: 7
